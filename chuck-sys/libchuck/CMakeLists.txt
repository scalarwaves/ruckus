cmake_minimum_required(VERSION 3.15.2)

set(PROJECT_NAME chuck)
project(${PROJECT_NAME})
# List all compile flags here
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
set(_CFLAGS "-D__LINUX_ALSA__ -D__PLATFORM_LINUX__ -D__CK_SNDFILE_NATIVE__ -DHAVE_CONFIG_H  -D__CHUCK_NO_MAIN__ -I../../chuck/src/core -I../../chuck/src/core/lo -I/usr/include")
set(_CXXFLAGS "-D__LINUX_ALSA__ -D__PLATFORM_LINUX__ -D__CK_SNDFILE_NATIVE__ -DHAVE_CONFIG_H -D__CHUCK_NO_MAIN__ -I../../chuck/src/core -I../../chuck/src/core/lo -I/usr/include -I/usr/include/c++/9.1.0")
set(CMAKE_C_FLAGS "${_CFLAGS}")
set(CMAKE_CXX_FLAGS "${_CXXFLAGS}")
set(ENV{CC} "gcc")
set(ENV{CXX} "g++")
set(ENV{LD} "ld")
set(ENV{BISON} "bison")
set(ENV{FLEX} "flex")
# find_program( CLANG_TIDY NAMES clang-tidy)
message("\n--------------------------------\n")
message("PROJECT NAME:\t\t${PROJECT_NAME}")
message("CMAKE_SYSTEM_NAME:\t${CMAKE_SYSTEM_NAME}")
message("CMAKE_C_COMPILER:\t${CMAKE_C_COMPILER}")
message("CMAKE_CXX_COMPILER:\t${CMAKE_CXX_COMPILER}")
message("CMAKE_GENERATOR:\t${CMAKE_GENERATOR}")
message("CMAKE_BUILD_TYPE:\t${CMAKE_BUILD_TYPE}")
message("CMAKE_BINARY_DIR:\t${CMAKE_BINARY_DIR}")
message("CMAKE_MODULE_PATH:\t${CMAKE_MODULE_PATH}")
message("CMAKE_PREFIX_PATH:\t${CMAKE_PREFIX_PATH}")
message("clang-tidy:\t\t${CLANG_TIDY}")
message("\n--------------------------------\n")
set(${PROJECT_NAME}_sources "../../chuck/src/core/chuck.cpp" "../../chuck/src/core/chuck.yy.c" "../../chuck/src/core/chuck.tab.c" "../../chuck/src/core/chuck_absyn.cpp" "../../chuck/src/core/chuck_carrier.cpp" "../../chuck/src/core/chuck_compile.cpp" "../../chuck/src/core/chuck_dl.cpp" "../../chuck/src/core/chuck_emit.cpp" "../../chuck/src/core/chuck_errmsg.cpp" "../../chuck/src/core/chuck_frame.cpp" "../../chuck/src/core/chuck_instr.cpp" "../../chuck/src/core/chuck_io.cpp" "../../chuck/src/core/chuck_lang.cpp" "../../chuck/src/core/chuck_oo.cpp" "../../chuck/src/core/chuck_otf.cpp" "../../chuck/src/core/chuck_parse.cpp" "../../chuck/src/core/chuck_scan.cpp" "../../chuck/src/core/chuck_shell.cpp" "../../chuck/src/core/chuck_stats.cpp" "../../chuck/src/core/chuck_symbol.cpp" "../../chuck/src/core/chuck_table.cpp" "../../chuck/src/core/chuck_type.cpp" "../../chuck/src/core/chuck_ugen.cpp" "../../chuck/src/core/chuck_utils.cpp" "../../chuck/src/core/chuck_vm.cpp" "../../chuck/src/core/hidio_sdl.cpp" "../../chuck/src/core/midiio_rtmidi.cpp" "../../chuck/src/core/rtmidi.cpp" "../../chuck/src/core/uana_extract.cpp" "../../chuck/src/core/uana_xform.cpp" "../../chuck/src/core/ugen_filter.cpp" "../../chuck/src/core/ugen_osc.cpp" "../../chuck/src/core/ugen_stk.cpp" "../../chuck/src/core/ugen_xxx.cpp" "../../chuck/src/core/ulib_machine.cpp" "../../chuck/src/core/ulib_math.cpp" "../../chuck/src/core/ulib_opsc.cpp" "../../chuck/src/core/ulib_regex.cpp" "../../chuck/src/core/ulib_std.cpp" "../../chuck/src/core/util_buffers.cpp" "../../chuck/src/core/util_console.cpp" "../../chuck/src/core/util_hid.cpp" "../../chuck/src/core/util_math.c" "../../chuck/src/core/util_network.c" "../../chuck/src/core/util_opsc.cpp" "../../chuck/src/core/util_raw.c" "../../chuck/src/core/util_serial.cpp"  "../../chuck/src/core/util_sndfile.c" "../../chuck/src/core/util_string.cpp" "../../chuck/src/core/util_thread.cpp" "../../chuck/src/core/util_xforms.c" "../../chuck/src/core/lo/address.c" "../../chuck/src/core/lo/blob.c" "../../chuck/src/core/lo/bundle.c" "../../chuck/src/core/lo/message.c" "../../chuck/src/core/lo/method.c" "../../chuck/src/core/lo/pattern_match.c" "../../chuck/src/core/lo/send.c" "../../chuck/src/core/lo/server.c" "../../chuck/src/core/lo/server_thread.c" "../../chuck/src/core/lo/timetag.c" "../../chuck/src/host/chuck_audio.cpp" "../../chuck/src/host/chuck_console.cpp" "../../chuck/src/host/chuck_main.cpp" "../../chuck/src/core/chuck.tab.c" "../../chuck/src/core/chuck.yy.c" "../../chuck/src/core/c_chuck.cpp")
# find_package(BISON)
# find_package(FLEX)
# BISON_TARGET(ChuckParser ../../chuck/src/core/chuck.y ${CMAKE_CURRENT_BINARY_DIR}/chuck.yy.c)
# FLEX_TARGET(ChuckLexer ../../chuck/src/core/chuck.lex ${CMAKE_CURRENT_BINARY_DIR}/chuck.tab.h ${CMAKE_CURRENT_BINARY_DIR}/chuck.tab.c)
# ADD_FLEX_BISON_DEPENDENCY(ChuckLexer ChuckParser)
# add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_sources})
add_library(${PROJECT_NAME} ${${PROJECT_NAME}_sources})
# NOTE: this will slow down compilation, but you'll have static code analysis :)
if(CLANG_TIDY)
    set_property(
        TARGET ${PROJECT_NAME}
        PROPERTY CXX_CLANG_TIDY "${CLANG_TIDY}")
endif()
# set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)
# set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)
